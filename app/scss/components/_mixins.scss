
@mixin bgCover(){
	-webkit-background-size: cover;
	-moz-background-size: cover;
	-o-background-size: cover;
	background-size: cover;
}

@mixin animated($seg) {
	-webkit-animation-duration: $seg;
	animation-duration: $seg;
	-webkit-animation-fill-mode: both;
	animation-fill-mode: both;
	animation-duration: $animated-seg;
	animation-timing-function: linear
}

@mixin after_bp($content:"content",$height:16px,$width:100px,$background:none){
  &:after{
      content:$content;
      height:$height;
      width:$width;
      position:absolute;
      opacity: 0.3;
      top: -32%;
      left: 100%;
      font-size: 50%;
      display:none;
      }
}

@mixin ellipsis(){
      overflow:hidden;
      white-space: nowrap;
      text-overflow: ellipsis;
}
.ellipsis{
        @include ellipsis();
}


@mixin masonry-box(){
	-moz-column-count:4;
	-moz-column-gap: 3%;
	-moz-column-width: 30%;
	-webkit-column-count:4;
	-webkit-column-gap: 3%;
	-webkit-column-width: 30%;
	column-count: 4;
	column-gap: 3%;
	column-width: 30%;
	width: 100%;
}

@mixin masonry-item(){
	display: inline-block; /* Display inline-block, and absolutely NO FLOATS! */
	width: 100%;
}

@mixin retina-image($filename, $background-size, $extension: png, $retina-filename: null, $retina-suffix: _2x, $asset-pipeline: false) {
  @if $asset-pipeline {
    background-image: image-url("#{$filename}.#{$extension}");
  }
  @else {
    background-image:       url("#{$filename}.#{$extension}");
  }

  @include hidpi {
    @if $asset-pipeline {
      @if $retina-filename {
        background-image: image-url("#{$retina-filename}.#{$extension}");
      }
      @else {
        background-image: image-url("#{$filename}#{$retina-suffix}.#{$extension}");
      }
    }

    @else {
      @if $retina-filename {
        background-image: url("#{$retina-filename}.#{$extension}");
      }
      @else {
        background-image: url("#{$filename}#{$retina-suffix}.#{$extension}");
      }
    }

    background-size: $background-size;

  }
}


// ==========================================================

// 320 and Up by Andy Clarke
// Version: 3.0
// URL: http://stuffandnonsense.co.uk/projects/320andup/
// Apache License: v2.0. http://www.apache.org/licenses/LICENSE-2.0

// ==========================================================

/* Mixins =================================================== */

// 1. ROOT                                         ==============================
// 2. TYPOGRAPHY                         ==============================

@mixin font-size($font-size: 16){
font-size : #{$font-size}px;
font-size : #{$font-size / 10}rem; }

@mixin text-overflow() {
overflow : hidden;
text-overflow : ellipsis;
white-space : nowrap; }

// 3. COLOUR                                 ==============================
// 4. TEXTURE                                 ==============================

// @include bordered(COLOR, COLOR, COLOR, COLOR);

@mixin bordered($top-color: #eee, $right-color: #eee, $bottom-color: #eee, $left-color: #eee) {
border-top : solid 1px $top-color;
border-left : solid 1px $left-color;
border-right : solid 1px $right-color;
border-bottom : solid 1px $bottom-color; }

// @include drop-shadow(HORIZONTAL, VERTICAL, BLUR, ALPHA);
@mixin drop-shadow($x-axis: 0, $y-axis: 1px, $blur: 2px, $alpha: 0.1) {
@include box-shadow($x-axis $y-axis $blur rgba(0, 0, 0, $alpha)); }

// 5. ELEMENTS                                 ==============================

// @include background-alpha(VALUE VALUE);

@mixin background-alpha($color: $white, $alpha: 1) {
background-color : hsla(hue($color), saturation($color), lightness($color), $alpha); }


// Contain floats

@mixin clearfix {
*zoom : 1;
&:before,
&:after {
display: table;
content : ""; }
&:after {
clear : both; } }

.clearfix {
@include clearfix; }

// For image replacement

@mixin hide-text() {
text-indent : 100%;
white-space : nowrap;
overflow : hidden; }

// Hide from visual and speaking browsers

@mixin hidden() {
display : none !important;
visibility : hidden; }

// Hide but maintain layout

@mixin invisible() {
visibility : hidden; }

// @include resize(VALUE) (none, both, horizontal, vertical, inherit)

@mixin resize($direction: both) {
resize : $direction;
overflow : auto; }

// @include userselect(VALUE) (all, element, none, text)

@mixin user-select($select) {
-webkit-user-select : $select;
-moz-user-select : $select;
-o-user-select : $select;
user-select : $select; }

// Hidden but available to speaking browsers

@mixin visuallyhidden() {
overflow : hidden;
position : absolute;
clip : rect(0 0 0 0);
height : 1px;
width : 1px;
margin : -1px;
padding : 0;
border : 0;
// Make visuallyhidden focusable with a keyboard

&.focusable {

&:active,
&:focus {
position : static;
clip : auto;
height : auto;
width : auto;
margin : 0;
overflow: visible; } } }

// 6. LAYOUT                                 ==============================

// @include columns(250px, 0, 24px, COLOR, solid, 1px)

@mixin columns($colwidth: 250px, $colcount: 0, $colgap: 50px, $columnRuleColor: #eee, $columnRuleStyle: solid, $columnRuleWidth: 1px) {
@include column-count($colcount);
@include column-gap($colgap);
@include column-width($colwidth);
@include column-rule-color($columnRuleColor);
@include column-rule-style($columnRuleStyle);
@include column-rule-width($columnRuleWidth); }

//  7. VENDOR-SPECIFIC                 ==============================
//  8. MODERNIZR                         ==============================
//  9. TEMPLATE SPECIFICS         ==============================



/// GOLDEN RATIO

// Scaling Varaibles
$golden:           1.618;
$minor-second:     1.067;
$major-second:     1.125;
$minor-third:      1.2;
$major-third:      1.25;
$perfect-fourth:   1.333;
$augmented-fourth: 1.414;
$perfect-fifth:    1.5;
$minor-sixth:      1.6;
$major-sixth:      1.667;
$minor-seventh:    1.778;
$major-seventh:    1.875;
$octave:           2;
$major-tenth:      2.5;
$major-eleventh:   2.667;
$major-twelfth:    3;
$double-octave:    4;

@function modular-scale($value, $increment, $ratio) {
  $v1: nth($value, 1);
  $v2: nth($value, length($value));
  $value: $v1;

  // scale $v2 to just above $v1
  @while $v2 > $v1 {
    $v2: ($v2 / $ratio); // will be off-by-1
  }
  @while $v2 < $v1 {
    $v2: ($v2 * $ratio); // will fix off-by-1
  }

  // check AFTER scaling $v2 to prevent double-counting corner-case
  $double-stranded: $v2 > $v1;

  @if $increment > 0 {
    @for $i from 1 through $increment {
      @if $double-stranded and ($v1 * $ratio) > $v2 {
        $value: $v2;
        $v2: ($v2 * $ratio);
      } @else {
        $v1: ($v1 * $ratio);
        $value: $v1;
      }
    }
  }

  @if $increment < 0 {
    // adjust $v2 to just below $v1
    @if $double-stranded {
      $v2: ($v2 / $ratio);
    }

    @for $i from $increment through -1 {
      @if $double-stranded and ($v1 / $ratio) < $v2 {
        $value: $v2;
        $v2: ($v2 / $ratio);
      } @else {
        $v1: ($v1 / $ratio);
        $value: $v1;
      }
    }
  }

  @return $value;
}

.vcenter {
        &:before {
                content: '';
                display: inline-block;
                height: 100%;
                vertical-align: middle;
        }
}


@mixin background-size($val:cover){
          -webkit-background-size: $val;
      -moz-background-size: $val;
      -o-background-size: $val;
      background-size: $val;
}

@mixin my-transition($seg:0.3s,$prop:all,$type:linear){
    -webkit-transition: $seg $prop $type;
  -moz-transition: $seg $prop $type;
  -ms-transition: $seg $prop $type;
  -o-transition: $seg $prop $type;
  transition: $seg $prop $type;
}



// GRADIENTS
// --------------------------------------------------



// Horizontal gradient, from left to right
//
// Creates two color stops, start and end, by specifying a color and position for each color stop.
// Color stops are not available in IE9 and below.
@mixin gradient-horizontal($start-color: #555, $end-color: #333, $start-percent: 0%, $end-percent: 100%) {
  background-image: -webkit-gradient(linear, $start-percent top, $end-percent top, from($start-color), to($end-color)); // Safari 4+, Chrome 2+
  background-image: -webkit-linear-gradient(left, color-stop($start-color $start-percent), color-stop($end-color $end-percent)); // Safari 5.1+, Chrome 10+
  background-image: -moz-linear-gradient(left, $start-color $start-percent, $end-color $end-percent); // FF 3.6+
  background-image:  linear-gradient(to right, $start-color $start-percent, $end-color $end-percent); // Standard, IE10
  background-repeat: repeat-x;
  filter: progid:DXImageTransform.Microsoft.gradient(startColorstr='#{ie-hex-str($start-color)}', endColorstr='#{ie-hex-str($end-color)}', GradientType=1); // IE9 and down
}

// Vertical gradient, from top to bottom
//
// Creates two color stops, start and end, by specifying a color and position for each color stop.
// Color stops are not available in IE9 and below.
@mixin gradient-vertical($start-color: #555, $end-color: #333, $start-percent: 0%, $end-percent: 100%) {
  background-image: -webkit-gradient(linear, left $start-percent, left $end-percent, from($start-color), to($end-color)); // Safari 4+, Chrome 2+
  background-image: -webkit-linear-gradient(top, $start-color $start-percent, $end-color $end-percent); // Safari 5.1+, Chrome 10+
  background-image:  -moz-linear-gradient(top, $start-color $start-percent, $end-color $end-percent); // FF 3.6+
  background-image: linear-gradient(to bottom, $start-color $start-percent, $end-color $end-percent); // Standard, IE10
  background-repeat: repeat-x;
  filter: progid:DXImageTransform.Microsoft.gradient(startColorstr='#{ie-hex-str($start-color)}', endColorstr='#{ie-hex-str($end-color)}', GradientType=0); // IE9 and down
}

@mixin gradient-directional($start-color: #555, $end-color: #333, $deg: 45deg) {
  background-repeat: repeat-x;
  background-image: -webkit-linear-gradient($deg, $start-color, $end-color); // Safari 5.1+, Chrome 10+
  background-image: -moz-linear-gradient($deg, $start-color, $end-color); // FF 3.6+
  background-image: linear-gradient($deg, $start-color, $end-color); // Standard, IE10
}
@mixin gradient-horizontal-three-colors($start-color: #00b3ee, $mid-color: #7a43b6, $color-stop: 50%, $end-color: #c3325f) {
  background-image: -webkit-gradient(left, linear, 0 0, 0 100%, from($start-color), color-stop($color-stop, $mid-color), to($end-color));
  background-image: -webkit-linear-gradient(left, $start-color, $mid-color $color-stop, $end-color);
  background-image: -moz-linear-gradient(left, $start-color, $mid-color $color-stop, $end-color);
  background-image: linear-gradient(to right, $start-color, $mid-color $color-stop, $end-color);
  background-repeat: no-repeat;
  filter: progid:DXImageTransform.Microsoft.gradient(startColorstr='#{ie-hex-str($start-color)}', endColorstr='#{ie-hex-str($end-color)}', GradientType=1); // IE9 and down, gets no color-stop at all for proper fallback
}
@mixin gradient-vertical-three-colors($start-color: #00b3ee, $mid-color: #7a43b6, $color-stop: 50%, $end-color: #c3325f) {
  background-image: -webkit-gradient(linear, 0 0, 0 100%, from($start-color), color-stop($color-stop, $mid-color), to($end-color));
  background-image: -webkit-linear-gradient($start-color, $mid-color $color-stop, $end-color);
  background-image: -moz-linear-gradient(top, $start-color, $mid-color $color-stop, $end-color);
  background-image: linear-gradient($start-color, $mid-color $color-stop, $end-color);
  background-repeat: no-repeat;
  filter: progid:DXImageTransform.Microsoft.gradient(startColorstr='#{ie-hex-str($start-color)}', endColorstr='#{ie-hex-str($end-color)}', GradientType=0); // IE9 and down, gets no color-stop at all for proper fallback
}
@mixin gradient-radial($inner-color: #555, $outer-color: #333) {
  background-image: -webkit-gradient(radial, center center, 0, center center, 460, from($inner-color), to($outer-color));
  background-image: -webkit-radial-gradient(circle, $inner-color, $outer-color);
  background-image: -moz-radial-gradient(circle, $inner-color, $outer-color);
  background-image: radial-gradient(circle, $inner-color, $outer-color);
  background-repeat: no-repeat;
}
@mixin gradient-striped($color: rgba(255,255,255,.15), $angle: 45deg) {
  background-image: -webkit-gradient(linear, 0 100%, 100% 0, color-stop(.25, $color), color-stop(.25, transparent), color-stop(.5, transparent), color-stop(.5, $color), color-stop(.75, $color), color-stop(.75, transparent), to(transparent));
  background-image: -webkit-linear-gradient($angle, $color 25%, transparent 25%, transparent 50%, $color 50%, $color 75%, transparent 75%, transparent);
  background-image: -moz-linear-gradient($angle, $color 25%, transparent 25%, transparent 50%, $color 50%, $color 75%, transparent 75%, transparent);
  background-image: linear-gradient($angle, $color 25%, transparent 25%, transparent 50%, $color 50%, $color 75%, transparent 75%, transparent);
}

// Reset filters for IE
//
// When you need to remove a gradient background, do not forget to use this to reset
// the IE filter for IE9 and below.
@mixin reset-filter() {
  filter: progid:DXImageTransform.Microsoft.gradient(enabled = false);
}


//// FOUNDATION CENTER X-Y
@mixin x-center() {
  position:absolute;
  left:50%;
  transform: translateX(-50%);
}
@mixin y-center() {
  position:relative;
  top:50%;
  transform: translateY(-50%);
}

@mixin xy-center() {
  position:absolute;
  top:50%;
  left:50%;
  transform: translate(-50%, -50%);
}


.xy-center {
  @include xy-center();
}

.x-center {
  @include x-center();
}

.y-center {
  @include y-center();
}





/*------------------------------------*\
    $MIXINS
\*------------------------------------*/



// Mediqueries y breakpoints: El mixin consta de 4 partes
//
//  $breakpoint: Es el Brakpoint o la variable de breakpoint, las definimos en _variables.scss
//               las que vienen por defecto: $bp1, $bp2, $bp3, $bp4 y $bp5.
//
//  $query1: max o min, dependiendo de como queremos el Mediaquery que funcione:
//           max-width, min-width, min-device-width, etc... - 'min' por defecto -
//
//  $query2: La segunda parte del query, lo que va después de 'min' o 'max'.
//           -device-width, -device-height, -width etc...  - 'width' por defecto -
//
//  $target: El medio. PUede ser 'all', 'screen', 'print', etc...
//           - '' por defecto -
//  USO:
//
//  **************************************************************************
//
//  $bp1 : 45em;
//
// .texto {
// 	color:red;
// 	@include media-query-bp($bp1,max,device-width,screen) {
// 		color: blue;
// 	}
// }
//
//  **************************************************************************
//
// Compilaría:
//
//  **************************************************************************
// .texto {
// color: red; }
// @media screen and (max-device-width: 45em) {
//   .texto {
//     color: blue; } }
//  **************************************************************************
//
// Y en la hoja de estilos para navegadores que no soportan mediaqueries
// compilaría lo siguiente (componenter/no-mq.scss):
//
//  **************************************************************************
//
// .texto {
// color: red; }
// .ie8-sucks .texto {
//   color: blue; }
//
//  **************************************************************************
//


// flexbox, because fuck you, that's why.

@mixin displayflex {
  display : -webkit-box;
  display : -moz-box;
  display : -ms-flexbox;
  display : -webkit-flex;
  display : flex;
}

@mixin align-items($align) {
  -webkit-align-items : $align;
  -moz-align-items : $align;
  -o-align-items : $align;
  align-items : $align;
}

@mixin flex($flex, $width) {
  -webkit-box-flex : $flex;
  -moz-box-flex : $flex;
  width : $width;
  -webkit-flex : $flex;
  -ms-flex : $flex;
  flex : $flex;
}

@mixin order($order) {
  -webkit-box-ordinal-group : $order;
  -moz-box-ordinal-group : $order;
  -ms-flex-order : $order;
  -webkit-order : $order;
  order : $order;
}

// $include flex-start(VALUE) (flex-start | flex-end | center | space-between | space-around)
@mixin content-justify($justify) {
  -webkit-content-justify : $justify;
  -moz-content-justify : $justify;
  -o-content-justify : $justify;
  content-justify : $justify;
}

// $include flex-direction(VALUE) (row | row-reverse | column | column-reverse)
@mixin flex-direction($direction) {
  -webkit-flex-direction : $direction;
  -moz-flex-direction : $direction;
  -o-flex-direction : $direction;
  flex-direction : $direction;
}


// .bordered(COLOR, COLOR, COLOR, COLOR);
@mixin bordered($top-color: #eee, $right-color: #eee, $bottom-color: #eee, $left-color: #eee) {
  border-top : solid 1px $top-color;
  border-left : solid 1px $left-color;
  border-right : solid 1px $right-color;
  border-bottom : solid 1px $bottom-color;
}

// .border-radius(VALUE,VALUE,VALUE,VALUE);
@mixin border-radius($topright: 0, $bottomright: 0, $bottomleft: 0, $topleft: 0) {
  -webkit-border-top-right-radius : $topright;
  -webkit-border-bottom-right-radius : $bottomright;
  -webkit-border-bottom-left-radius : $bottomleft;
  -webkit-border-top-left-radius : $topleft;
  -moz-border-radius-topright : $topright;
  -moz-border-radius-bottomright : $bottomright;
  -moz-border-radius-bottomleft : $bottomleft;
  -moz-border-radius-topleft : $topleft;
  border-top-right-radius : $topright;
  border-bottom-right-radius : $bottomright;
  border-bottom-left-radius : $bottomleft;
  border-top-left-radius : $topleft;
  -webkit-background-clip : padding-box;
  -moz-background-clip : padding;
  background-clip : padding-box;
}

// .box-shadow(HORIZONTAL VERTICAL BLUR COLOR))
@mixin box-shadow($shadow: 0 1px 3px rgba(0,0,0,.25)) {
  -webkit-box-shadow : $shadow;
  box-shadow : $shadow;
}

// .drop-shadow(HORIZONTAL, VERTICAL, BLUR, ALPHA);
@mixin drop-shadow($x-axis: 0, $y-axis: 1px, $blur: 2px, $alpha: 0.1) {
  -webkit-box-shadow : $x-axis $y-axis $blur rgba(0, 0, 0, $alpha);
  -moz-box-shadow : $x-axis $y-axis $blur rgba(0, 0, 0, $alpha);
  box-shadow : $x-axis $y-axis $blur rgba(0, 0, 0, $alpha);
}

// .opacity(VALUE);
@mixin opacity($opacity : .5) {
  -webkit-opacity : $opacity;
  -moz-opacity : $opacity;
  opacity : $opacity;
}

// .rotate(VALUEdeg);
@mixin rotate($deg) {
  -webkit-transform : rotate($deg);
  -moz-transform : rotate($deg);
  -ms-transform : rotate($deg);
  -o-transform : rotate($deg);
  transform : rotate($deg);
}

// .scale(VALUE);
@mixin scale($ratio) {
  -webkit-transform : scale($ratio);
  -moz-transform : scale($ratio);
  -ms-transform : scale($ratio);
  -o-transform : scale($ratio);
  transform : scale($ratio);
}

// .skew(VALUE, VALUE);
@mixin skew($x: 0, $y: 0) {
  -webkit-transform : skew($x, $y);
  -moz-transform : skew($x, $y);
  -ms-transform : skew($x, $y);
  -o-transform : skew($x, $y);
  transform : skew($x, $y);
}

// .transition(PROPERTY DURATION DELAY(OPTIONAL) TIMING-FINCTION);
@mixin transition($transition) {
  -webkit-transition : $transition;
  -moz-transition : $transition;
  -ms-transition : $transition;
  -o-transition : $transition;
  transition : $transition;
}

// .translate(VALUE, VALUE)
@mixin translate($x: 0, $y: 0) {
  -webkit-transform : translate($x, $y);
  -moz-transform : translate($x, $y);
  -ms-transform : translate($x, $y);
  -o-transform : translate($x, $y);
  transform : translate($x, $y);
}

@mixin translate3d($x: 0, $y: 0, $z: 0) {
  -webkit-transform : translate($x, $y, $z);
  -moz-transform : translate($x, $y, $z);
  -ms-transform : translate($x, $y, $z);
  -o-transform : translate($x, $y, $z);
  transform : translate($x, $y, $z);
}


// .background-alpha(VALUE VALUE);
@mixin background-alpha($color: $white, $alpha: 1) {
  background-color : hsla(hue($color), saturation($color), lightness($color), $alpha);
}

// .background-size(VALUE VALUE);
@mixin background-size($size){
  -webkit-background-size : $size;
  -moz-background-size : $size;
  -o-background-size : $size;
  background-size : $size;
}

// .background-clip(VALUE); (border-box, padding-box, content-box)
@mixin background-clip($clip) {
  -webkit-background-clip : $clip;
  -moz-background-clip : $clip;
  background-clip : $clip;
}

// .box-sizing(VALUE); (border-box, padding-box, content-box)
@mixin box-sizing($boxsize: border-box) {
  -webkit-box-sizing : $boxsize;
  -moz-box-sizing : $boxsize;
  -ms-box-sizing : $boxsize;
  box-sizing : $boxsize;
}


// .resize(VALUE) (none, both, horizontal, vertical, inherit)

@mixin resize($direction: both) {
  resize : $direction;
  overflow : auto;
}

// .userselect(VALUE) (all, element, none, text)

@mixin user-select($select) {
  -webkit-user-select : $select;
  -moz-user-select : $select;
  -o-user-select : $select;
  user-select : $select;
}



// .resize(VALUE) (none, both, horizontal, vertical, inherit)

@mixin resize($direction: both) {
  resize : $direction;
  overflow : auto;
}




// .columns(250px, 0, 24px, COLOR, solid, 1px)

@mixin columns($colwidth: 250px, $colcount: 0, $colgap: 50px, $columnRuleColor: #eee, $columnRuleStyle: solid, $columnRuleWidth: 1px) {
  -webkit-column-width : $colwidth;
  -webkit-column-count : $colcount;
  -webkit-column-gap : $colgap;
  -webkit-column-rule-color : $columnRuleColor;
  -webkit-column-rule-style : $columnRuleStyle;
  -webkit-column-rule-width : $columnRuleWidth;
  -moz-column-width : $colwidth;
  -moz-column-count : $colcount;
  -moz-column-gap : $colgap;
  -moz-column-rule-color : $columnRuleColor;
  -moz-column-rule-style : $columnRuleStyle;
  -moz-column-rule-width : $columnRuleWidth;
  column-width : $colwidth;
  column-count : $colcount;
  column-gap : $colgap;
  column-rule-color : $columnRuleColor;
  column-rule-style : $columnRuleStyle;
  column-rule-width : $columnRuleWidth;
}


/**
 * Create vendor-prefixed CSS in one go, e.g.
 *
   `@include vendor(border-radius, 4px);`
 *
 */
@mixin vendor($property, $value...){
  -webkit-#{$property}:$value;
  -moz-#{$property}:$value;
  -ms-#{$property}:$value;
  -o-#{$property}:$value;
  #{$property}:$value;
}


//
//Creamos prefijos para tod-o dios
//
//   `@include vendor(border-radius, 4px);`
//

@mixin vendor($property, $value...){
  -webkit-#{$property}:$value;
  -moz-#{$property}:$value;
  -ms-#{$property}:$value;
  -o-#{$property}:$value;
  #{$property}:$value;
}

@mixin font-size($font-size){
  font-size:$font-size +px;
  font-size:$font-size / $base-font-size +rem;
}